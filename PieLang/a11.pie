#lang pie


; Introduction to types

(claim intriguing-word Atom)
(define intriguing-word 'humble)

(claim lucky-num Nat)
(define lucky-num 58)

(claim to-go-order (Pair Nat Atom))
(define to-go-order (cons 58 'humble))

(claim MyFirstType U)
(define MyFirstType (Pair Nat (List Atom)))

(claim my-thing-and-Atom (Pair MyFirstType U))
(define my-thing-and-Atom (cons (cons 42 nil) MyFirstType))


; Nats

(claim with-Nats
  (-> (-> Nat Nat
        Nat)
      (Pair Nat Nat)
    Nat))
(define with-Nats
    (lambda (f args)
        (f (car args) (cdr args))))

; test: passed

; (check-same Nat (with-Nats (λ (n m) n) (cons 1 2)) 1)
; (check-same Nat (with-Nats (λ (n m) (add1 m)) (cons 1 2)) 3)

(claim at-least-two?
  (-> Nat
    Atom))
(define at-least-two?
    (lambda (n)
        (which-Nat n 'nil 
            (lambda (n-1) (which-Nat n-1 'nil
                (lambda (_) 't))))))

; test: passed

; (check-same Atom (at-least-two? 0) 'nil)
; (check-same Atom (at-least-two? 1) 'nil)
; (check-same Atom (at-least-two? 41) 't)

(claim + (-> Nat Nat
           Nat))
(define + (λ (n m) (rec-Nat n
                     m
                     (λ (k k+m) (add1 k+m)))))
 
(claim * (-> Nat Nat
           Nat))
(define * (λ (n m) (rec-Nat n
                     0
                     (λ (k k*m) (+ m k*m)))))


(claim expt (-> Nat Nat Nat))
(define expt
    (lambda (base exp)
        (iter-Nat exp 1 
            (lambda (almost) (* base almost)))))

; Lists

(claim map
  (Π ((A U)
      (B U))
    (→ (→ A B) (List A)
       (List B))))
(define map
    (lambda (A B)
        (lambda (f la)
            (rec-List la (the (List B) nil)
                (lambda (a d almost)
                    (:: (f a) almost))))))


; (map Nat Nat (lambda (a) (add1 a)) (:: 1 nil))

(claim nth
  (Π ((A U))
    (→ (List A) A Nat
       A)))
(define nth
    (lambda (A)
        (lambda (ls)
            (rec-List ls
                (the (-> A Nat A) (lambda (default n) default))
                (lambda (a d almost)
                    (lambda (default n)
                        (which-Nat n a
                            (lambda (n-1) (almost default n-1)))))))))


; test: passed
; (nth Nat (:: 1 nil) 42 1)
; (nth Nat (:: 1 nil) 42 0)

; Vecs

(claim vec-second
    (Pi ([A U]
         [k Nat])
        (-> (Vec A (add1 (add1 k)))
            A)))
(define vec-second
    (lambda (A k)
        (lambda (v) (head (tail v)))))

; test: passed
; (vec-second Nat 0 (vec:: 4 (vec:: 2 vecnil)))

; Brainteasers

(claim max
    (-> Nat Nat 
        Nat))
(define max
    (lambda (m)
        (rec-Nat m
            (the (-> Nat Nat) (lambda (n) n))
            (lambda (m-1 almost)
                (lambda (n) (which-Nat n (add1 m-1)
                    (lambda (n-1) (add1 (almost n-1))))))))) 

; test: passed
; (max 42 58)
; (max 18 15)

(claim ack
    (-> Nat Nat
        Nat))
(define ack
    (lambda (n)
        (rec-Nat n
            (the (-> Nat Nat) (lambda (m) (add1 m)))
            (lambda (n-1 almost)
                (lambda (m) (rec-Nat m (almost 1)
                    (lambda (m-1 ack) (almost ack))))))))

; test: passed
; (ack 0 0)
; ; 1
; (ack 1 2)
; ; 4
; (ack 3 2)
; ; 29
; (ack 3 3)
; ; 61